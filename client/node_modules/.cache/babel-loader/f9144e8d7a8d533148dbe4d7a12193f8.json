{"ast":null,"code":"var _jsxFileName = \"/Users/ey8ygwc/Desktop/search-utility/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useReducer } from 'react';\nimport logo from './assets/images/net-logo.png';\nimport SearchPanel from './components/SearchPanel/SearchPanel';\nimport './App.scss';\nimport TweetBox from './components/TweetBox/TweetBox';\nimport { DESCRIPTION_TEXT, TWEET_STREAM_URL } from './variables/variables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TweetStreamContext = /*#__PURE__*/createContext({});\nexport const tweetContextDefaultValue = {\n  tweet: '',\n  user: '',\n  retweet_count: '',\n  created_at: 0,\n  verified: false,\n  lang: ''\n};\n\nfunction App() {\n  _s();\n\n  const [tweetsFound, setTweetsFound] = useState(); // create new array to pass to Provider Customer/Child \n\n  let newArr = [];\n  const [newData, setNewData] = useState([]);\n  let count = 0;\n  useEffect(() => {\n    // on initial load, call the exteernal stream but limit\n    // the return data for the sake of this excercise\n    callExternalStream();\n  }, []);\n\n  const callExternalStream = () => {\n    // Get stream from external\n    let eventSource = new EventSource(TWEET_STREAM_URL);\n    eventSource.addEventListener('message', tweet => {\n      newArr.push(JSON.parse(tweet.data)); // increment count to control bubbling payloas\n\n      count++; // limit return data to 100 result items\n\n      if (count >= 100) {\n        setNewData(newArr);\n        eventSource.close();\n      }\n    }); // after 100 results are reached, close the eventsource sttream\n    // to prevent memory leaks\n\n    eventSource.addEventListener('close', () => eventSource.close());\n    return () => eventSource.close();\n  };\n\n  const performSearchFilterRReducer = (filters, state) => {\n    // using reacts internal reeducer, listeen for submit button to update state\n    // from the search panel component and display search results\n    if (state.length === 0) {\n      callExternalStream();\n    } // map thru the input items to filter the tweet results\n\n\n    state.map((param, index) => {\n      const textparam = param.value;\n\n      if (param.type === 'Contains') {\n        var queryContains = newData.filter(el => el.tweet.includes(textparam));\n        setNewData(queryContains);\n      }\n\n      if (param.type === 'equals') {\n        let queryEquals = newData.filter(el => el.tweet.toLowerCase() === textparam.toLowerCase());\n        setNewData(queryEquals);\n      }\n\n      if (param.type === 'Regex') {\n        let queryRegex = newData.filter(el => el.tweet.toLowerCase().includes(textparam.toLowerCase()));\n        setNewData(queryRegex);\n      }\n    }); // return the filtered data in the state\n\n    return [...state, filters];\n  };\n\n  const [filter, setFilter] = useReducer(performSearchFilterRReducer, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(TweetStreamContext.Provider, {\n      value: {\n        tweets: [newData, setNewData],\n        criteria: [filter, setFilter]\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"Nts-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"Description-text\",\n          children: DESCRIPTION_TEXT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Nts-container\",\n        children: [/*#__PURE__*/_jsxDEV(SearchPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TweetBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c5BaEHgRtkzr0twm7W64RB+oMas=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ey8ygwc/Desktop/search-utility/client/src/App.tsx"],"names":["React","createContext","useEffect","useState","useReducer","logo","SearchPanel","TweetBox","DESCRIPTION_TEXT","TWEET_STREAM_URL","TweetStreamContext","tweetContextDefaultValue","tweet","user","retweet_count","created_at","verified","lang","App","tweetsFound","setTweetsFound","newArr","newData","setNewData","count","callExternalStream","eventSource","EventSource","addEventListener","push","JSON","parse","data","close","performSearchFilterRReducer","filters","state","length","map","param","index","textparam","value","type","queryContains","filter","el","includes","queryEquals","toLowerCase","queryRegex","setFilter","tweets","criteria"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useReducer } from 'react';\nimport logo from './assets/images/net-logo.png';\nimport SearchPanel from './components/SearchPanel/SearchPanel';\nimport './App.scss';\nimport TweetBox from './components/TweetBox/TweetBox';\nimport { DESCRIPTION_TEXT, TWEET_STREAM_URL } from './variables/variables';\n\nexport const TweetStreamContext = createContext<any>({});\n\ninterface ITweets {\n  tweet: string;\n  user: string;\n  retweet_count: string;\n  created_at: number;\n  verified: boolean;\n  lang: string;\n}\n\ninterface IFilter {\n  value: string;\n  add: boolean; \n  type: string;\n}\n \nexport const tweetContextDefaultValue = {\n    tweet: '',\n    user: '',\n    retweet_count: '',\n    created_at: 0,\n    verified: false,\n    lang: ''\n}\n \nfunction App() {\n  const [tweetsFound, setTweetsFound] = useState<ITweets[] | any>();\n  // create new array to pass to Provider Customer/Child \n  let newArr: ITweets[] = [];\n  const [newData, setNewData] = useState([]);\n  let count = 0; \n\n  useEffect(() => {\n    // on initial load, call the exteernal stream but limit\n    // the return data for the sake of this excercise\n    callExternalStream();\n  }, [])\n\n  const callExternalStream = () => {\n    // Get stream from external\n    let eventSource = new EventSource(TWEET_STREAM_URL);\n    eventSource.addEventListener('message', (tweet) => {\n    newArr.push(JSON.parse(tweet.data));\n    // increment count to control bubbling payloas\n    count++; \n    // limit return data to 100 result items\n    if(count >= 100) {\n        setNewData(newArr);\n        eventSource.close();\n      }\n    })\n    // after 100 results are reached, close the eventsource sttream\n    // to prevent memory leaks\n    eventSource.addEventListener('close', () => eventSource.close());\n    return (() => eventSource.close());\n  }\n\n  const performSearchFilterRReducer = (filters: any, state: any[]) => {\n    // using reacts internal reeducer, listeen for submit button to update state\n    // from the search panel component and display search results\n    if(state.length === 0) {\n      callExternalStream();\n    }\n    // map thru the input items to filter the tweet results\n    state.map((param: any, index: number) => {\n      const textparam = param.value;\n      if(param.type === 'Contains') {\n        var queryContains = newData.filter(el => el.tweet.includes(textparam));\n        setNewData(queryContains)\n      }\n\n      if(param.type === 'equals') {\n        let queryEquals = newData.filter((el => el.tweet.toLowerCase() === textparam.toLowerCase()));\n        setNewData(queryEquals)\n      }\n\n      if(param.type === 'Regex') {\n        let queryRegex = newData.filter((el => el.tweet.toLowerCase().includes(textparam.toLowerCase())\n        ))       \n        setNewData(queryRegex);\n      }\n    })\n    // return the filtered data in the state\n    return [...state, filters]\n  }\n\n  const [filter, setFilter] = useReducer(performSearchFilterRReducer, []);\n\n  return (\n    <div className='App'>\n      <TweetStreamContext.Provider value={{ tweets: [newData, setNewData], criteria: [filter, setFilter]}} >\n        <header className=\"App-header\">\n          <img src={logo} className='Nts-logo' alt='logo' />\n          <h2 className='Description-text'>{ DESCRIPTION_TEXT }</h2>\n        </header>\n        <div className='Nts-container'>\n          <SearchPanel />\n          <TweetBox />\n        </div>\n      </TweetStreamContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}